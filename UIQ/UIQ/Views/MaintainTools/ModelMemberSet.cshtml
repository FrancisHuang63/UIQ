@using UIQ.Controllers
@using UIQ.Enums
@using UIQ.Models
@{
	Layout = null;
	bool isNew = ViewBag.IsNew;
	IEnumerable<Model> modelItems = ViewBag.ModelItems;
	IEnumerable<Data> dataItems = ViewBag.DataItems;
	IEnumerable<Work> workItems = ViewBag.WorkItems;
	IEnumerable<CronTab> cronTabItems = ViewBag.CronTabItems;
	IEnumerable<Batch> batchItems = ViewBag.BatchItems;
	IEnumerable<Archive> archiveItems = ViewBag.ArchiveItems;
	IEnumerable<Output> outputItems = ViewBag.OutputItems;
	Member member = ViewBag.Member;

	var currentModelItem = modelItems.FirstOrDefault(x => x.Model_Id == member?.Model_Id);
	var newModelPostion = (modelItems?.Max(x => x.Model_Position) ?? 0) + 1;
	var masterCronGroup = cronTabItems?.FirstOrDefault()?.Master_Group;
	var momber_id = 0;
}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<script type="text/javascript" src="~/js/jquery-3.1.1.min.js"></script>
<script type="text/javascript" src="~/js/jquery-ui.min.js"></script>
<script type="text/javascript" src="~/js/apprise-1.5.full.js"></script>
<script type="text/javascript" src="~/js/tool.js"></script>
<script type="text/javascript" src="~/js/jquery.flexselect.js"></script>
<script type="text/javascript" src="~/js/liquidmetal.js"></script>
<script type="text/javascript" src="~/js/setting.js"></script>

<html xmlns="http://www.w3.org/1999/xhtml"  lang="zh-hant">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<link href="~/css/jquery-ui.min.css" rel="stylesheet" type="text/css" />
		<link href="~/css/style.css" rel="stylesheet" type="text/css" />
		<link href="~/css/jqueryslidemenu.css" rel="stylesheet" type="text/css" />
		<link href="~/css/apprise.css" rel="stylesheet" type="text/css" />
		<link href="~/css/flexselect.css" rel="stylesheet" type="text/css" />

		<title>Model & Member Setting</title>
	</head>
	<body>
		<div id="loading"><img alt="loading" src="~/images/clock.gif"></div>
		<div class=topic>Model & Member Setting</div>
		<br>
		<h1>This page is used to @(isNew ? "ADD a NEW" : "EDIT or DELETE an OLD") MODEL & MEMBER</h1>
		<div>
			<form id="setting" action="@Url.Action(nameof(MaintainToolsController.ModelMemberSet))" method="post" autocomplete="off"  enctype="multipart/form-data">
				<input id="memberID" type="hidden" name="memberId" value="@member?.Member_Id">
				@Html.Hidden("IsNew", isNew)
				<div class="check_point_dialog" id="check_point_dialog" title="Check Points" style="display:none;">
					<table width="100%" border="1" aria-describedby="check_point_dialog">
						<thead>
							<tr>
								<th style="display:none;" id="batch_id"></th>
								<th id="batch_name" width=65%></th>
								<th id="add_check_btn" width=35%>
									<a type="button" id="addCheckPoint" class="btn_default">
										<img src="~/images/add_icons.png" alt="新增"/>
										Add Check Point
									</a>
								</th>
							</tr>
						</thead>
						<tbody></tbody>
					</table>
				</div>

				<table width="85%" border="1" aria-describedby="check_point_dialog2">
					<thead>
						<tr>
							<th scope="col">Name</th>
							<th scope="col" width=80%>Setting</th>
						</tr>
					</thead>
					<tbody>
						@* Model Set *@
						<tr style="display:none;">
							<th scope="col"></th>
						</tr>
						<tr>
							<td>Model Set</td>
							<td>
								<table aria-describedby="Model_Set">
									<tr>
										<th scope="col"></th>
									</tr>
									<tr>
										<td><input type="radio" name="IsNewModelName" @(isNew ? string.Empty : "checked") value="False">Old Model Name<span color="red">*</span>：</td>
										<td>
											<select id="model_select" name="Model.Model_Id">
												@foreach (var item in modelItems)
												{
													var sel = item.Model_Id == member?.Model_Id ? "selected" : string.Empty;
													<!option value="@item.Model_Id" data-position="@item.Model_Position" @(sel) >@item.Model_Name</!option>
												}
											</select>
											<input type="button" value="DelModel" onclick="deleteModelCheck()" />
										</td>
									</tr>
									<tr>
										<td><input type="radio" name="IsNewModelName" value="True" />New Model Name<span style="color:red;">*</span>：</td>
										<td><input type="text" name="New_Model_Name">(Ex: NFS)</td>
									</tr>
									<tr>
										<td>Model Position<span style="color:red;">*</span>：</td>
										<td><input type="text" id="model_position" name="Model.Model_Position" value="@currentModelItem?.Model_Position">(Ex: 24)</td>
									</tr>
									<input type="hidden" name="New_Model_Position" value="@newModelPostion">
								</table>
							</td>
						</tr>

						@* Member Set *@
						<tr>
							<td>Member Set</td>
							<td>
								<table aria-describedby="Member_Set">
									<tr style="display:none;">
										<th scope="col"></th>
									</tr>
									<tr>
										<td>Member Name<span style="color:red;">*</span>：</td>
										<td>
											<input type="text" name="Member.Member_Name" value="@member?.Member_Name">(Ex: M03)
											<input type="hidden" name="Member.Member_Id" value="@member?.Member_Id">
											<input type="hidden" id="memberModelId" name="Member.Model_Id" value="@member?.Model_Id">
										</td>
									</tr>
									<tr>
										<td>Member Nickname<span style="color:red;">*</span>：</td>
										<td><input type="text" name="Member.Nickname" value="@member?.Nickname"></td>
									</tr>
									<tr>
										<td>Member Position<span style="color:red;">*</span>：</td>
										<td><input type="text" name="Member.Member_Position" value="@member?.Member_Position">(Ex: 24)</td>
									</tr>
									<tr>
										<td>Member Account<span style="color:red;">*</span>：</td>
										<td><input type="text" name="Member.Account" value="@member?.Account">(Ex: npcaxxx)</td>
									</tr>
									<tr>
										<td>Member Path：</td>
										<td>
											<input type="text" name="Member.Member_Path" value="@member?.Member_Path">
											(Ex: /ncs/npcaxxx/<span style="color:red;">*</span>/NFS/M03)
										</td>
									</tr>
									<tr>
										<td>Dtg Value<span style="color:red;">*</span>：</td>
										<td><input type="text" name="Member.Member_Dtg_Value" value="@member?.Member_Dtg_Value">(Ex: 6 or 12 or 24)</td>
									</tr>
									<tr>
										<td>Group Member Name：</td>
										<td><input type="text" name="Member.Model_Group" value="@member?.Model_Group">(Ex: M01 TWRF or M03 caa)</td>
									</tr>
									<tr>
										<td>Member Reset：</td>
										<td><input type="text" name="Member.Reset_Model" value="@member?.Reset_Model">(Ex: cgibin/KillJob.ksh)</td>
									</tr>
									<tr>
										<td>Member Dtg Adjust：</td>
										<td><input type="text" name="Member.Dtg_Adjust" value="@member?.Dtg_Adjust">(Ex: bin/setdtg.sh)</td>
									</tr>
									<tr>
										<td>Member Fix：</td>
										<td><input type="text" name="Member.Fix_Failed_Model" value="@member?.Fix_Failed_Model">(Ex: cgibin/Rescue.ksh)</td>
									</tr>
									<tr>
										<td>Member Submit：</td>
										<td><input type="text" name="Member.Submit_Model" value="@member?.Submit_Model">(Ex: cgibin/ReRun.ksh)</td>
									</tr>
									<tr>
										<td>Normal Prediction Time：</td>
										<td><input type="text" name="normal_pre_time" value="@member?.Normal_Pre_Time">(Ex: 300)</td>
									</tr>
									<tr>
										<td>Typhoon Prediction Time：</td>
										<td><input type="text" name="Member.Typhoon_Pre_Time" value="@member?.Typhoon_Pre_Time">(Ex: 300)</td>
									</tr>
									<tr>
										<td>About Typhoon：</td>
										<td><input type="checkbox" id="typhoon_model" name="Member.Typhoon_Model" @(member?.Typhoon_Model == (int)TyphoonModeEnum.One ? "checked" : string.Empty) ></td>
									</tr>
									<input type="hidden" name="Member.Fix_Failed_Target_Directory" value="@(member?.Fix_Failed_Target_Directory)">
								</table>
							</td>
						</tr>

						@* Cron Table *@
						<tr>
							<td>Cron Table<img src="~/images/add_icons.png" onclick="addSatnamingCronGroup()" alt="新增"/></td>
							<td>
								<table id="crontabTable" aria-describedby="crontabTable">
									<tr style="display:none;"><th scope="col"></th></tr>
									<tbody>
										<tr id="crontabTableItem">
											@foreach(var cronGroupCronTabItems in cronTabItems.GroupBy(g => g.Cron_Group))
											{
												<td valign="top">
													<table id="crongrpTable_@(cronGroupCronTabItems.Key)" border="1" bgcolor="@(cronGroupCronTabItems.Key == masterCronGroup ? "pink" : string.Empty)" aria-describedby="crongrpTable" >
														<tbody>
															<tr>
																<th scope="col" bgcolor="lightcyan">@(cronGroupCronTabItems.Key)<img src="~/images/add_icons.png" onclick="addSatnamingCrontab('@(cronGroupCronTabItems.Key)')" alt="新增"></th>
															</tr>
															@for (var idx = 0; idx < cronGroupCronTabItems.Count(); idx ++)
															{
																var item = cronGroupCronTabItems.ElementAt(idx);
																<tr class="cronTabItem">
																	<td>
																		<input type="text" name="CronTab.Start_Time" value="@item.Start_Time">@(idx == 0 ? "(Ex: 17:00:00)" : string.Empty)
																		<img src="~/images/delete_icons.png" onclick="deleteSatnamingCrontab(this)" alt="移除">
																	</td>
																	<input type="hidden" name="CronTab.Cron_Group" value="@cronGroupCronTabItems.Key">
																	<input type="hidden" name="CronTab.Master_Group" value="@item.Master_Group" />
																	<input type="hidden" name="CronTab.Group_Validation" value="@item.Group_Validation" />
																</tr>
															}
														</tbody>
													</table>
												</td>
											}
										</tr>
									</tbody>
								</table>
								
							</td>
						</tr>


						@* Batch *@
						<tr>
							<td>Batch<img src="~/images/add_icons.png" onclick="addSatnamingBatch()" alt="新增"/></td>
							<td>
								<table id="batchTable" border="1" frame="below">
									@for (var idx = 0; idx < batchItems.Count(); idx++)
									{
										var item = batchItems.ElementAt(idx);
										<tr class="batchItem">
											<td>
												<table width="100%">
													<tr>
														<td>Batch Position<font color="red">*</font></td>
														<td>
															<input name="Batch.Batch_Position" type="text" value="@item?.Batch_Position">(Ex: 1, 2 ,3)
															<img src="~/images/delete_icons.png" onclick="deleteSatnamingBatch(this)" alt="移除" align="right"/>
														</td>
													</tr>
													<tr>
														<td>Batch Name<font color="red">*</font></td>
														<td>
															<input class="batchName" name="Batch.Batch_Name" type="text" size="17" value="@item?.Batch_Name">
															<input name="Batch.Batch_Relay" type="checkbox" value="1" @(item?.Batch_Relay == 1 ? "checked" : string.Empty)>(Ex: Rnwpnfs1&是否為中繼點)
														</td>
													</tr>
													<tr>
														<td>Batch Type</td>
														<td>
															<input name="Batch.Batch_Type" type="text" value="@item?.Batch_Type">(Ex: Major, Post)
														</td>
													</tr>
													<tr>
														<td>Batch Dtg</td>
														<td>
															<input name="Batch.Batch_Dtg" type="text" value="@item?.Batch_Dtg">(Ex: 00, 06)
														</td>
													</tr>
													<tr>
														<td>Batch Time<font color="red">*</font></td>
														<td>
															<input name="Batch.Batch_Time" type="text" size="15" value="@item?.Batch_Time">分鐘&nbsp;(Ex: 44)
														</td>
													</tr>
													<tr>
														<td>Check Point<img id="showCheckPoint" src="~/images/add_icons.png" alt="新增"/></td>
														<td></td>
													</tr>

													<input type="hidden" name="Batch.Batch_Id" value="@item?.Batch_Id" />
												</table>
											</td>
										</tr>
									}
								</table>
							</td>
						</tr>
		
						@* Archive *@
						<tr>
							<td>Archive<img src="~/images/add_icons.png" onclick="addSatnamingArchive()" alt="新增"/></td>
							<td>
								<table id="archiveTable">
									@for (var idx = 0; idx < archiveItems.Count(); idx ++)
									{
										var item = archiveItems.ElementAt(idx);

										<tbody class="archiveItem">
											<tr>
												<td>Target Directory：
													<input class="archive_directory" type="text" name="Archive.Target_Directory" value="@item?.Target_Directory">
												</td>
											</tr>
											<tr></tr>
											<tr>
												<td>
													<select name="Archive.Data_Id">
														@foreach (var data in dataItems)
														{
															<!option value="@(data.Data_Id)" @(item?.Data_Id == data.Data_Id ? "selected" : string.Empty) >@data.Data_Name</!option>
														}
													</select>
													<input name="Archive.Archive_Redo" type="text" value="@item?.Archive_Redo">(Ex: bin/Rarchive<font color="red">xxx</font>.ksh)
													<img src="~/images/delete_icons.png" onclick="deleteSatnamingArchive(this)" alt="移除">
												</td>
											</tr>
											<tr><input type="hidden" name="Archive.Archive_Id" value="@item?.Archive_Id"></tr>
										</tbody>
									}
								</table>
							</td>
						</tr>

						@* Output *@
						<tr>
							<td>Output<img src="~/images/add_icons.png" onclick="addSatnamingOutput()" alt="新增"/></td>
							<td>
								<table id="outputTable">
									<tbody id="outputTbody">
										@for (var idx = 0; idx < outputItems.Count(); idx ++)
										{
											var item = outputItems.ElementAt(idx);

											<tr class="outputItem">
												<td>
													<select name="Output.Work_Id">
														@foreach (var work in workItems)
														{
															<!option value="@(work.Work_Id)" @(item?.Work_Id == work.Work_Id ? "selected" : string.Empty)>@work.Work_Name</!option>	
														}
													</select>
													<input name="Output.Model_Output" type="text" value="@item.Model_Output">(Ex: bin/R<font color="red">xxx</font>.ksh)
													<img src="~/images/delete_icons.png" onclick="deleteSatnamingOutput(this)" alt="移除">
												</td>
												<input type="hidden" name="Output.Output_Id" value="@item?.Output_Id" />
											</tr>
										}
									</tbody>
								</table>
							</td>
						</tr>

						@* maintainer Setting *@
						<tr>
							<td>maintainer Setting</td>
							<td>
								<input id="maintainer_status" type="radio" name="maintainer_status" value="0" @(member?.Maintainer_Status == 0 || member?.Maintainer_Status == null ? "checked" : string.Empty) >on
								<input id="maintainer_status" type="radio" name="maintainer_status" value="2" @(member?.Maintainer_Status == 2 ? "checked" : string.Empty) >maintainer
							</td>
						</tr>
					</tbody>
				</table>
				<input type="submit" value="@(isNew ? "Add" : "Update")">
				@if(isNew == false)
				{
					<input type="button" value="Delete" onclick="deleteCheck()">
				}
			</form>
		</div>

		<script>
			$(function(){
				getOldCheckPoint();
			})

			function setOldCheckPoint(response){
				if(response.success){
					if(response.data.length > 0){
						$('tr.batchItem').each((idx, item) => {
							let batchId = $(item).find('[name="Batch.Batch_Id"]').val();
							let batchType = $(item).find('[name="Batch.Batch_Type"]');
							let batchDtg = $(item).find('[name="Batch.Batch_Type"]');
							let batchName = $(item).find('[name="Batch.Batch_Name"]');
							let index = $(item).index();
							let checkPointInfo = response.data.filter(x => x.batch_id == batchId);
							set_old_check_dialog(batchId, batchType, batchDtg, batchName, batchName.val(), index, checkPointInfo);
						});
					}
				}
				else{
					alert('Error : ' + htmlEncode(response.message));
				}
			}

			function getOldCheckPoint(){
				$.ajax({
					url: '@Url.Action(nameof(MaintainToolsController.GetCheckPoints))',
					type: 'POST',
					data:{ memberId: $('#memberID').val() },
					success: function(response){
						setOldCheckPoint(response)
					}	
				});
			}

			function addSatnamingCronGroup(){
				if($('#crongrpTable_New').length > 0) return false;

				let table = 'crontab';
				let otr = document.getElementById("crontabTable").insertRow(-1);
				let otd = document.createElement("td");
				otd.innerHTML=`<table id="crongrpTable_New" border=1>
									<th bgcolor=lightcyan align=left>
										New Mode name:
										<br>
										<input type="text" id="crontabCronGroup_New" onkeydown="addNewCronGroup(event)" />
										<tr>
											<td id="crontab_New">
												New Cron time:<br>
												<input id="crontabStartTime_New" type="text" value="" onkeydown="addNewCronGroup(event)" />
											</td>
										</tr>
									</th>
								</table>`;
				otr.appendChild(otd);
			}

			function addNewCronGroup(e){
				var reg = /^(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d$/;
				var regExp =new RegExp(reg);
				let crontabCronGroup = '';

				if($("#crontabCronGroup_New").val() === 'Backup')
					crontabCronGroup = 'Backup';
				if($("#crontabCronGroup_New").val() === 'Typhoon')
					crontabCronGroup = 'Typhoon';
				
				if (crontabCronGroup != '' && e.keyCode === 13){
					let repData = '<td valign="top">';
					repData +='<table id="crongrpTable_' + crontabCronGroup + '" border="1" aria-describedby="crongrpTable" >';
					repData +='<tbody><tr>';
					repData +='<th scope="col" bgcolor="lightcyan">' + crontabCronGroup + '<img src="@Href("~/images/add_icons.png")" onclick="addSatnamingCrontab(\'' + crontabCronGroup + '\')" alt="新增"/></th>';
					repData +='</tr><tr class="cronTabItem">';
					repData +='<td><input type="text" id="CronTabStart_Time" name="CronTab.Start_Time">(Ex: 17:00:00)';
					repData +='<img src="@Href("~/images/delete_icons.png")" onclick="deleteSatnamingCrontab(this)" alt="移除"></td>';
					repData +='<input type="hidden" name="CronTab.Cron_Group" value="' + crontabCronGroup + '">';
					repData +='<input type="hidden" name="CronTab.Master_Group" value="@(masterCronGroup)" />';
					repData +='<input type="hidden" name="CronTab.Group_Validation" value="0" />';
					repData +='</tr></tbody></table></td>';

					$('#crontabTableItem').prepend(repData);
					if($("#crontabStartTime_New").val() != '' && $("#crontabStartTime_New").val().length === 8 
					   && regExp.test($("#crontabStartTime_New").val()) && $("#crontabStartTime_New").val().substring(3, 2) === ':' 
					   && $("#crontabStartTime_New").val().substring(5, 6) === ':' ) 
					{ 
						$('#CronTabStart_Time').val($("#crontabStartTime_New").val());
					}
					$('#crongrpTable_New').remove();
				}
			}

			function addSatnamingCrontab(cronGroup){
				let groupTable = `crongrpTable_${cronGroup}`;
				let idx = $(`#${groupTable} tr.cronTabItem`).length;
				let newTr = document.getElementById(groupTable).insertRow(-1);
				let newTd = document.createElement("td");
				newTd.innerHTML=`<input type="text" name="CronTab.Start_Time" value="" />${(idx == 0 ? '(Ex: 17:00:00)' : '')}
								<img src="@(Href("~/images/delete_icons.png"))" onclick="deleteSatnamingCrontab(this)" alt="移除">`;
				$(newTr).addClass('cronTabItem');
				newTr.appendChild(newTd);
				newTr.innerHTML += `<input type="hidden" name="CronTab.Cron_Group" value="${cronGroup}">`;
				newTr.innerHTML += `<input type="hidden" name="CronTab.Master_Group" value="@(masterCronGroup)" />`;
				newTr.innerHTML += `<input type="hidden" name="CronTab.Group_Validation" value="0" />`;
			}

			function deleteSatnamingCrontab(element){
				let deleteTr = $(element).closest('tr');
				deleteTr.remove();
			}

			function addSatnamingBatch(){
				let isNewOne = $('tr.batchItem').length == 0;
				let newBatch = `<tr class="batchItem">
									<td>
										<table width="100%">
											<tr>
												<td>Batch Position<font color="red">*</font></td>
												<td>
													<input name="Batch.Batch_Position" type="text" value="">${isNewOne ? '(Ex: 1, 2 ,3)' : ''}
													<img src="@Href("~/images/delete_icons.png")" onclick="deleteSatnamingBatch(this)" alt="移除" align="right"/>
												</td>
											</tr>
											<tr>
												<td>Batch Name<font color="red">*</font></td>
												<td>
													<input class="batchName" name="Batch.Batch_Name" type="text" size="17" value="">
													<input name="Batch.Batch_Relay" type="checkbox" value="1">${isNewOne ? '(Ex: Rnwpnfs1&是否為中繼點)' : ''}
												</td>
											</tr>
											<tr>
												<td>Batch Type</td>
												<td>
													<input name="Batch.Batch_Type" type="text" value="">${isNewOne ? '(Ex: Major, Post)' : ''}
												</td>
											</tr>
											<tr>
												<td>Batch Dtg</td>
												<td>
													<input name="Batch.Batch_Dtg" type="text" value="">${isNewOne ? '(Ex: 00, 06)' : ''}
												</td>
											</tr>
											<tr>
												<td>Batch Time<font color="red">*</font></td>
												<td>
													<input name="Batch.Batch_Time" type="text" size="15" value="">分鐘&nbsp;${isNewOne ? '(Ex: 44)' : ''}
												</td>
											</tr>
											<tr>
												<td>Check Point<img id="showCheckPoint" src="@Href("~/images/add_icons.png")" alt="新增"/></td>
												<td></td>
											</tr>

											<input type="hidden" name="Batch.Batch_Id" value="" />
										</table>
									</td>
								</tr>`;
				$('#batchTable').append(newBatch);
			}

			function deleteSatnamingBatch(element){
				$(element).closest('tr.batchItem').remove();
			}

			function addSatnamingArchive(){
				let isNewOne = $('tbody.archiveItem').length == 0;
				let newAcrchive = `<tbody class="archiveItem">
										<tr>
											<td>Target Directory：
												<input class="archive_directory" type="text" name="Archive.Target_Directory" value="">
											</td>
										</tr>
										<tr></tr>
										<tr>
											<td>
												<select name="Archive.Data_Id">
													@foreach (var data in dataItems)
													{
														<option value="@data.Data_Id">@data.Data_Name</option>
													}
												</select>
												<input name="Archive.Archive_Redo" type="text" value="">${isNewOne ? '(Ex: bin/Rarchive<font color="red">xxx</font>.ksh)' : ''}
												<img src="@Href("~/images/delete_icons.png")" onclick="deleteSatnamingArchive(this)" alt="移除">
											</td>
										</tr>
										<tr><input type="hidden" name="Archive.Archive_Id" value=""></tr>
									</tbody>`;
				
				$('#archiveTable').append(newAcrchive);
			}

			function deleteSatnamingArchive(element){
				$(element).closest('tbody').remove();
			}

			function addSatnamingOutput(){
				let isNewOne = $('tr.outputItem').length == 0; 
				let newOutput = `<tr class="outputItem">
									<td>
										<select name="Output.Work_Id">
											@foreach (var work in workItems)
											{
												<option value="@(work.Work_Id)">@work.Work_Name</option>	
											}
										</select>
										<input name="Output.Model_Output" type="text" value="">${isNewOne ? '(Ex: bin/R<font color="red">xxx</font>.ksh)' : ''}
										<img src="@Href("~/images/delete_icons.png")" onclick="deleteSatnamingOutput(this)" alt="移除">
									</td>
									<input type="hidden" name="Output.Output_Id" value="" />
								</tr>`;

				$('#outputTbody').append(newOutput);
			}

			function deleteSatnamingOutput(element){
				$(element).closest('tr.outputItem').remove();
			}

			function deleteModelCheck(){
				if (confirm('Do You Want to Delete This Model ?\n\n(ALL the Members of this Model will be DELETE!)')){
					if (confirm('Are You Sure Delete This Model ?')){
						$.ajax({
							url: '@Url.Action(nameof(MaintainToolsController.DeleteModel))',
							type: 'POST',
							data:{ memberId: $('#memberID').val(), model_Id: $('#model_select').val() },
							success: function(response){
								if(response.success){
									alert('Delete success!!');
									location.href = encodeURI('@Url.Action(nameof(MaintainToolsController.ModelMemberSet), new{ memberId = member?.Member_Id })');
								}
								else{
									alert(htmlEncode(response.message));
								}
								
							},
							error: function(){
								alert('Delete error!!');
							}
						});
					}
				}
			}

			function deleteCheck(){
				if (confirm('Do You Want to Delete This Member ?')){
					let memberId = $('#memberID').val();
					$.ajax({
						url: '@Url.Action(nameof(MaintainToolsController.DeleteMember))',
						type: 'POST',
						data: { memberId: memberId },
						success: function(response){
							if(response.success){
								alert('Delete success!!');
								window.close();
							}
							else{
								alert(htmlEncode(response.message));
							}							
						},
						error: function(response){
							alert(`Delete error!!`);
						}
					});
				}
			}

			function getFormPostDatas(){
				let postData =  new FormData($('#setting')[0]);
				postData.append('IsNew', $('[name="memberId"]').val());
				postData.append('memberId', $('#memberID').val());
				postData.append('IsNewModelName', $('[name="IsNewModelName"]:checked').val());
				postData.append('New_Model_Name', $('[name="New_Model_Name"]').val());
				postData.append('New_Model_Position', $('[name="New_Model_Position"]').val());
								
				//Model
				postData.append('Model.Model_Id', $('[name="Model.Model_Id"]').val());
				postData.append('Model.Model_Name', $('[name="Model.Model_Id"] option:selected').text());
				postData.append('Model.Model_Position', $('[name="Model.Model_Position"]').val());

				//Member
				postData.append('Member.Member_Id', $('[name="memberId"]').val());
				postData.append('Member.Member_Name', $('[name="Member.Member_Name"]').val());
				postData.append('Member.Nickname', $('[name="Member.Nickname"]').val());
				postData.append('Member.Account', $('[name="Member.Account"]').val());
				postData.append('Member.Model_Group', $('[name="Member.Model_Group"]').val());
				postData.append('Member.Member_Path', $('[name="Member.Member_Path"]').val());
				postData.append('Member.Member_Position', $('[name="Member.Member_Position"]').val());
				postData.append('Member.Member_Dtg_Value', $('[name="Member.Member_Dtg_Value"]').val());
				postData.append('Member.Reset_Model', $('[name="Member.Reset_Model"]').val());
				postData.append('Member.Dtg_Adjust', $('[name="Member.Dtg_Adjust"]').val());
				postData.append('Member.Fix_Failed_Model', $('[name="Member.Fix_Failed_Model"]').val());
				postData.append('Member.Submit_Model', $('[name="Member.Submit_Model"]').val());
				postData.append('Member.Fix_Failed_Target_Directory', $('[name="Member.Fix_Failed_Target_Directory"]').val());
				postData.append('Member.Maintainer_Status', $('[name="maintainer_status"]:checked').val());
				postData.append('Member.Normal_Pre_Time', $('[name="Member.Normal_Pre_Time"]').val());
				postData.append('Member.Typhoon_Pre_Time', $('[name="Member.Typhoon_Pre_Time"]').val());
				postData.append('Member.Typhoon_Model', $('[name="Member.Typhoon_Model"]').prop('checked') ? 1 : 0);
				
				//CronTab
				let cronTabs = [];
				$('tr.cronTabItem').each((idx, item) => {
					postData.append(`CronTabs[${idx}].Member_Id`, $('[name="memberId"]').val());
					postData.append(`CronTabs[${idx}].Start_Time`, $(item).find('[name="CronTab.Start_Time"]').val());
					postData.append(`CronTabs[${idx}].Cron_Group`, $(item).find('[name="CronTab.Cron_Group"]').val());
					postData.append(`CronTabs[${idx}].Master_Group`, $(item).find('[name="CronTab.Master_Group"]').val());
					postData.append(`CronTabs[${idx}].Group_Validation`, $(item).find('[name="CronTab.Group_Validation"]').val());
				});

				//Batch
				let batchs = [];
				$('tr.batchItem').each((idx, item) => {
					postData.append(`Batchs[${idx}].Batch_Id`, $(item).find('[name="Batch.Batch_Id"]').val());
					postData.append(`Batchs[${idx}].Batch_Position`, $(item).find('[name="Batch.Batch_Position"]').val());
					postData.append(`Batchs[${idx}].Member_Id`, $('[name="memberId"]').val());
					postData.append(`Batchs[${idx}].Batch_Name`, $(item).find('[name="Batch.Batch_Name"]').val());
					postData.append(`Batchs[${idx}].Batch_Type`, $(item).find('[name="Batch.Batch_Type"]').val());
					postData.append(`Batchs[${idx}].Batch_Dtg`, $(item).find('[name="Batch.Batch_Dtg"]').val());
					postData.append(`Batchs[${idx}].Batch_Time`, $(item).find('[name="Batch.Batch_Time"]').val());
					postData.append(`Batchs[${idx}].Batch_Relay`, $(item).find('[name="Batch.Batch_Relay"]').val());
				});

				//Archive
				let archives = [];
				$('tbody.archiveItem').each((idx, item) => {
					postData.append(`Archives[${idx}].Archive_Id`, $(item).find('[name="Archive.Archive_Id"]').val());
					postData.append(`Archives[${idx}].Member_Id`, $('[name="memberId"]').val());
					postData.append(`Archives[${idx}].Data_Id`, $(item).find('[name="Archive.Data_Id"]').val());
					postData.append(`Archives[${idx}].Archive_Redo`, $(item).find('[name="Archive.Archive_Redo"]').val());
					postData.append(`Archives[${idx}].Target_Directory`, $(item).find('[name="Archive.Target_Directory"]').val());
				});

				//Output
				let outputs = [];
				$('tr.outputItem').each((idx, item) => {
					postData.append(`Outputs[${idx}].Output_Id`, $(item).find('[name="Output.Output_Id"]').val());
					postData.append(`Outputs[${idx}].Member_Id`, $('[name="memberId"]').val());
					postData.append(`Outputs[${idx}].Work_Id`, $(item).find('[name="Output.Work_Id"]').val());
					postData.append(`Outputs[${idx}].Model_Output`, $(item).find('[name="Output.Model_Output"]').val());
				});

				//CheckPoint
				$('tr.checkPointItem').each((idx, item) => {
					postData.append(`CheckPoints[${idx}].Member_Id`, $('[name="memberId"]').val());
					postData.append(`CheckPoints[${idx}].Batch_Id`, $(item).find('[name="CheckPoint.Batch_Id"]').val());
					postData.append(`CheckPoints[${idx}].Batch_Name`, $(item).find('[name="CheckPoint.Batch_Name"]').val());
					postData.append(`CheckPoints[${idx}].Shell_Name`, $(item).find('[name="CheckPoint.Shell_Name"]').val());
					postData.append(`CheckPoints[${idx}].Tolerance_Time`, $(item).find('[name="CheckPoint.Tolerance_Time"]').val());
				});

				return postData;
			}

			$('#setting').on('submit', function(e){
				if($('#crongrpTable_New').length > 0){
					e.preventDefault();
					e.stopPropagation();
					return false;
				}

				let form = $(this);
				let url = form.attr('action');
				let formData = getFormPostDatas();
				let request = new XMLHttpRequest();
				request.open("POST", url);
				request.send(formData);
			})
		</script>
	</body>
</html>
