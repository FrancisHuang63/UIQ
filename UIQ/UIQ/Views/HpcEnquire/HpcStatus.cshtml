@using System.Text.RegularExpressions
@using UIQ.Services.Interfaces
@using Microsoft.Extensions.Options
@inject IConfiguration configuration
@inject IOptions<RunningJobInfoOption> runningJobInfoOption
@inject IUiqService uiqService
@inject ILogFileService logFileService  //For debug

@{
    Layout = null;
    
    var hostName = System.Net.Dns.GetHostName();
    var runningJobInfo = runningJobInfoOption.Value?.GetRunningJobInfo(hostName);
    var hpcCtl = configuration.GetValue<string>("HpcCTL");
    var rshAccount = configuration.GetValue<string>("RshAccount");
    var uiPath = configuration.GetValue<string>("UiPath");
}

<link rel="stylesheet" href="~/css/style.css" type="text/css">
<link rel="stylesheet" href="~/css/fjstyle.css" type="text/css">

<TITLE>HPC status</Title>
<div class=topic>System enquire > HPC system status</div>
<h1>show the water level of disks status</h1>
<div class="enquire">
	<pre>
		<p>@(await uiqService.RunCommandAsync("df -k | grep -v /dev/"))</p>
		<p>Enquiring data completely!</p>
	</pre>
</div>
<h1>show the node status(summary)</h1>
<div class="short">
	<pre>
		@if (runningJobInfo != null)
		{
			var loginIp = runningJobInfo?.Items?.FirstOrDefault()?.Datas.FirstOrDefault()?.LoginIp;
			var pjshowrsc_s = $"rsh -l {rshAccount} {loginIp} /users/xa09/bin/chknode";
			var commandResult = await uiqService.RunCommandAsync(pjshowrsc_s);
			var pjshowrsc_sarr = Regex.Split(commandResult, "/\n/");
			
			<p>
				@foreach (var item in pjshowrsc_sarr)
				{
					if(item.Trim() != "")
						@(item)<br>
				}
			</p>
			<p>Enquiring data completely!</p>
		}
	</pre>
</div>

<h1>show the node status(detail)</h1>
<div class="huge">
	<pre>
		@if (runningJobInfo != null)
		{
			var loginIp = runningJobInfo?.Items?.FirstOrDefault()?.Datas.FirstOrDefault()?.LoginIp;
			//Execute pjshowrsc command and make it an array
			var pjshowrsc_s = $"rsh -l {rshAccount} {loginIp} date";
			var dateResult = await uiqService.RunCommandAsync(pjshowrsc_s);
			@($"{rshAccount} {loginIp}")@(dateResult)
			pjshowrsc_s = $"rsh -l {rshAccount} {loginIp} pjshowrsc";
			var commandResult = await uiqService.RunCommandAsync(pjshowrsc_s);
			//For debug
			var debugCommand = $"rsh -l {rshAccount} {loginIp} 'date; pjshowrsc'";
			var debugResult = await uiqService.RunCommandAsync(debugCommand);
			await logFileService.WriteUiErrorLogFileAsync($"[HpcStatus][commandResult] command : {debugCommand}, result: {debugResult}");
			var pjshowrsc_sarr = commandResult.Split("\n");

			//Make 5th line of pjshowrsc_s delimited by space
			var dataArray = pjshowrsc_sarr.Count() >= 4 ? pjshowrsc_sarr[3].Split(" ") : new string[] { };

			//Get #line of nodelist.txt
			var nodeNum = $"cat {uiPath}wwwroot/shell/nodelist.txt | wc -l";
			nodeNum = (await uiqService.RunCommandAsync(nodeNum)).TrimEnd();

			//Comapare pjshowrsc_s result and #line of nodelist.txt 
			if(dataArray.Count() >= 2 && dataArray[1] != nodeNum)
			{
				<span class="c1">Some nodes might have stopped!</span><br>;
			}

			// Print pjshowrsc_s result
			@foreach(var item in pjshowrsc_sarr)
			{
				//For debug
				await logFileService.WriteUiErrorLogFileAsync($"[HpcStatus][pjshowrsc_sarr] command : {item}, result: ");
				@(await uiqService.RunCommandAsync(item) + "\n")
			}

			<p>Enquiring data completely!</p>

			//Read node list and make it an array
			var nodeList = $"cat {uiPath}wwwroot/shell/nodelist.txt";
			commandResult = await uiqService.RunCommandAsync(nodeList);
			//For debug
			await logFileService.WriteUiErrorLogFileAsync($"[HpcStatus][nodeList] command : {nodeList}, result: {commandResult}");
			var nodelistArray =  commandResult.Split("\n");

			//Execute pjshowrsc command and make it an array
			var pjshowrsc_d = $"rsh -l {rshAccount} {loginIp} 'date; pjshowrsc -v -E | cut -c-41'";
			commandResult = await uiqService.RunCommandAsync(pjshowrsc_d);
			//For debug
			await logFileService.WriteUiErrorLogFileAsync($"[HpcStatus][pjshowrsc_d] command : {pjshowrsc_d}, result: {commandResult}");
			var pjshowrsc_darr = commandResult.Split("\n");
			
			<p>@($"{hpcCtl} {loginIp}")</p>

			//Check if pjshowrsc_darr has all nodes.
			//If so, display pjshowrsc_darr. If not, display the node name and make it red.
			if(pjshowrsc_darr.Length >= 5)
			{
				for(var i = 0; i < 5; i++)
				{
@(await uiqService.RunCommandAsync(pjshowrsc_darr[i]) + "\n")
				}
			}
			foreach(var node in nodelistArray)
			{
				var marr =  pjshowrsc_darr.Where(x => x.Contains($"{node}"));
				if(marr.Count() == 1)
				{
@(await uiqService.RunCommandAsync($"{marr.FirstOrDefault()}") + "\n")
				}
				else if(marr.Count() == 0)
				{
<span class="c1">@($"{node}      --      --      -    --Gi\n")</span>
				}
				else
				{
<span class="c2">@($"\"{node}\"\t??Matched 2 or more\n")</span>
				}
			}
			<p>Enquiring data completely!</p>
		}
	</pre>
</div>


